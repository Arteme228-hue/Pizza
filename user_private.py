from aiogram import F, types, Router

from aiogram.filters import CommandStart, Command, or_f
from aiogram.utils.formatting import (
    as_list,
    as_marked_section
)

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from filters.chat_types import ChatTypeFilter

from kbds.reply import get_keyboard

from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))

user_carts = {}
user_addresses = {}

@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
        reply_markup=get_keyboard(
            "–ú–µ–Ω—é",
            "–ü–æ–º–æ—â—å",
            "–û –º–∞–≥–∞–∑–∏–Ω–µ",
            "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã",
            "–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏",
            "–ö–æ—Ä–∑–∏–Ω–∞",
            placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            sizes=(2, 2)
        ),
    )


@user_private_router.message(F.text.lower() == "–ø–æ–º–æ—â—å")
@user_private_router.message(Command("help"))
async def menu_cmd(message: types.Message):
    await message.answer("–ï—Å–ª–∏ —É –≤–∞—Å —Å–ª—É—á–∏–ª–æ—Å—å –æ—à–∏–±–∫–∞,\n"
                         "—Ç–æ –≤–æ—Ç –≤–∞–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n"
                         "–ì–ª–∞–≤–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: @Putinman22 –∏ @laryugkh")

@user_private_router.message(F.text.lower() == "–æ –º–∞–≥–∞–∑–∏–Ω–µ")
@user_private_router.message(Command("about"))
async def about_cmd(message: types.Message):
    await message.answer("–û –Ω–∞—Å: üçïPizza - —ç—Ç–æ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ –≤–∫—É—Å–Ω–µ–π—à–µ–π –ø–∏—Ü—Ü—ã! –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º –º–µ–Ω—é, –≤—ã–±–∏—Ä–∞–π—Ç–µ –ª—é–±–∏–º—ã–µ –Ω–∞—á–∏–Ω–∫–∏. –û—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–∫–∞–∑ –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤. –ë—ã—Å—Ç—Ä–æ, —É–¥–æ–±–Ω–æ –∏ –≤–∫—É—Å–Ω–æ - –≤—Å—ë –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞!")

@user_private_router.message(F.text.lower() == "–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã")
@user_private_router.message(Command("payment"))
async def payment_cmd(message: types.Message):
    text = as_list(
        as_marked_section(
            "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã:",
            "–ú–æ–∂–Ω–æ:",
            "–ö–∞—Ä—Ç–æ–π",
            "–í –∑–∞–≤–µ–¥–µ–Ω–∏–∏",
            marker="‚úÖ ",
        ),
        as_marked_section(
            "–ù–µ–ª—å–∑—è:",
            "–ë—Ä–∞–¥, –º–æ–∂–Ω–æ –∑–∞ –∫–æ—à–µ–ª—å–∫–æ–º –≤ –º–∞—à–∏–Ω—É?",
            marker="‚ùå "
        ),
        sep="\n----------------------\n",
    )
    await message.answer(text.as_html())

@user_private_router.message(F.text.lower() == "–≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏")
@user_private_router.message(Command("shipping"))
async def menu_cmd(message: types.Message):
    text = as_list(
        as_marked_section(
            "–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏/–∑–∞–∫–∞–∑–∞:",
            "–ú–æ–∂–Ω–æ:",
            "–ö—É—Ä—å–µ—Ä",
            "–°–∞–º–æ–≤—ã–Ω–æ—Å",
            "–ü–æ–∫—É—à–∞—é —É –≤–∞—Å",
            marker="‚úÖ ",
        ),
        as_marked_section(
            "–ù–µ–ª—å–∑—è:",
            "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏",
            marker="‚ùå "
        ),
        sep="\n----------------------\n",
    )
    await message.answer(text.as_html())

@user_private_router.message(or_f(Command("menu"), (F.text.lower() == "–º–µ–Ω—é")))
async def menu_cmd(message: types.Message):
    button_peperoni = types.InlineKeyboardButton(text="–ü–∏—Ü—Ü–∞ –ø–µ–ø–µ—Ä–æ–Ω–∏", callback_data="In_peperoni_button")
    button_margarita = types.InlineKeyboardButton(text="–ü–∏—Ü—Ü–∞ –º–∞—Ä–≥–∞—Ä–∏—Ç–∞", callback_data="In_margarita_button")
    button_4sura = types.InlineKeyboardButton(text="–ü–∏—Ü—Ü–∞ 4 —Å—ã—Ä–∞", callback_data="In_4sura_button")

    keyboard_inline = types.InlineKeyboardMarkup(inline_keyboard=[
        [button_peperoni],
        [button_margarita],
        [button_4sura]
    ])
    await message.reply("–í—ã–±–µ—Ä–µ—Ç–µ –ø–∏—Ü—Ü—É: ", reply_markup=keyboard_inline)

@user_private_router.callback_query(F.data == "In_peperoni_button")
async def send_random_value(callback: types.CallbackQuery):
    photo = "https://ibb.co/B5MtD0F4"
    caption = (
        '–ü–∏—Ü—Ü–∞ –ø–µ–ø–µ—Ä–æ–Ω–∏\n\n'
        '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: –ø—Ä—è–Ω—ã–µ –∫–æ–ª–±–∞—Å–∫–∏ –ø–µ–ø–ø–µ—Ä–æ–Ω–∏ —Å –ª–µ–≥–∫–æ–π –ø–µ—Ä—á–∏–Ω–∫–æ–π, —Å—ã—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞ —Å–æ —Å–ª–∏–≤–æ—á–Ω—ã–º –≤–∫—É—Å–æ–º –∏ –Ω–µ–∂–Ω—ã–π —Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å')
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="add_peperoni")]
    ])
    await callback.message.answer_photo(photo, caption=caption, reply_markup=keyboard)

@user_private_router.callback_query(F.data == "In_margarita_button")
async def send_random_value(callback: types.CallbackQuery):
    photo = "https://ibb.co/sdGLy2RJ"
    caption = (
        '–ü–∏—Ü—Ü–∞ –º–∞—Ä–≥–∞—Ä–∏—Ç–∞\n\n'
        '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: –∏–∑–º–µ–ª—å—á—ë–Ω–Ω—ã–µ –∏ –æ—á–∏—â–µ–Ω–Ω—ã–µ –ø–æ–º–∏–¥–æ—Ä—ã, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, —Å–≤–µ–∂–∏–µ –ª–∏—Å—Ç—å—è –±–∞–∑–∏–ª–∏–∫–∞ –∏ –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ')
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="add_peperoni")]
    ])
    await callback.message.answer_photo(photo, caption=caption, reply_markup=keyboard)

@user_private_router.callback_query(F.data == "In_4sura_button")
async def send_random_value(callback: types.CallbackQuery):
    photo = "https://ibb.co/dw1nTjH3"
    caption = (
        '–ü–∏—Ü—Ü–∞ 4 —Å—ã—Ä–∞\n\n'
        '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: –º–æ—Ü–∞—Ä–µ–ª–ª–∞, —Ç–∏–ª—å–∑–∏—Ç–µ—Ä, –ø–∞—Ä–º–µ–∑–∞–Ω, –¥–æ—Ä –±–ª—é, —Å–ª–∏–≤–æ—á–Ω—ã–π —Å–æ—É—Å')
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="add_peperoni")]
    ])
    await callback.message.answer_photo(photo, caption=caption, reply_markup=keyboard)

@user_private_router.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    product_key = callback.data[4:]

    if user_id not in user_carts:
        user_carts[user_id] = {}

    cart = user_carts[user_id]

    if cart.get(product_key, 0) >= 1:
        await callback.answer("–í –∫–æ—Ä–∑–∏–Ω–µ —É–∂–µ –µ—Å—Ç—å 1 —Ç–∞–∫–∞—è –ø–∏—Ü—Ü–∞. –ë–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å", show_alert=True)
        return

    cart[product_key] = 1
    await callback.answer("–ü–∏—Ü—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!")


@user_private_router.message(F.text.lower() == "–∫–æ—Ä–∑–∏–Ω–∞")
@user_private_router.message(Command("cart"))
async def show_cart(message: types.Message):
    user_id = message.from_user.id
    cart = user_carts.get(user_id, {})

    if not cart:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    for product_key, qty in cart.items():
        if product_key == "peperoni":
            name = "–ü–∏—Ü—Ü–∞ –ø–µ–ø–ø–µ—Ä–æ–Ω–∏"
            desc = "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: –ø—Ä—è–Ω—ã–µ –∫–æ–ª–±–∞—Å–∫–∏ –ø–µ–ø–ø–µ—Ä–æ–Ω–∏ —Å –ª–µ–≥–∫–æ–π –ø–µ—Ä—á–∏–Ω–∫–æ–π, —Å—ã—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞ —Å–æ —Å–ª–∏–≤–æ—á–Ω—ã–º –≤–∫—É—Å–æ–º –∏ –Ω–µ–∂–Ω—ã–π —Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å"
        elif product_key == "margarita":
            name = "–ü–∏—Ü—Ü–∞ –º–∞—Ä–≥–∞—Ä–∏—Ç–∞"
            desc = "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: –∏–∑–º–µ–ª—å—á—ë–Ω–Ω—ã–µ –∏ –æ—á–∏—â–µ–Ω–Ω—ã–µ –ø–æ–º–∏–¥–æ—Ä—ã, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, —Å–≤–µ–∂–∏–µ –ª–∏—Å—Ç—å—è –±–∞–∑–∏–ª–∏–∫–∞ –∏ –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ"
        elif product_key == "4sura":
            name = "–ü–∏—Ü—Ü–∞ 4 —Å—ã—Ä–∞"
            desc = "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: –º–æ—Ü–∞—Ä–µ–ª–ª–∞, —Ç–∏–ª—å–∑–∏—Ç–µ—Ä, –ø–∞—Ä–º–µ–∑–∞–Ω, –¥–æ—Ä –±–ª—é, —Å–ª–∏–≤–æ—á–Ω—ã–π —Å–æ—É—Å"

        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚ûñ", callback_data=f"dec_{product_key}"),
                types.InlineKeyboardButton(text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty}", callback_data="count"),
                types.InlineKeyboardButton(text="‚ûï", callback_data=f"inc_{product_key}")
            ],
            [
                types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"del_{product_key}")
            ]
        ])

        await message.answer(f"{name}\n{desc}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty}", reply_markup=keyboard)

    keyboard_checkout = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")]
    ])
    await message.answer("–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", reply_markup=keyboard_checkout)

class OrderStates(StatesGroup):
    waiting_for_phone = State()
    address_choice = State()
    waiting_for_address = State()

@user_private_router.callback_query(F.data == "checkout")
async def start_checkout(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cart = user_carts.get(user_id, {})
    if not cart:
        await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", show_alert=True)
        return

    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
        "–ú–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç.",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.set_state(OrderStates.waiting_for_phone)
    await callback.answer()

@user_private_router.message(OrderStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = None
    if message.contact:
        phone = message.contact.phone_number
    else:
        phone = message.text

    await state.update_data(phone=phone)

    user_id = message.from_user.id
    stored_address = user_addresses.get(user_id)

    if stored_address:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å")],
                [KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(f"–£ –≤–∞—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∞–¥—Ä–µ—Å: {stored_address}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π?", reply_markup=keyboard)
        await state.set_state(OrderStates.address_choice)
    else:
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.")
        await state.set_state(OrderStates.waiting_for_address)

@user_private_router.message(OrderStates.address_choice, F.text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å")
async def use_stored_address(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    stored_address = user_addresses.get(user_id)

    await state.update_data(address=stored_address)
    await finish_order(message, state)

@user_private_router.message(OrderStates.address_choice, F.text == "–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å")
async def request_new_address(message: types.Message, state: FSMContext):
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.")
    await state.set_state(OrderStates.waiting_for_address)

@user_private_router.message(OrderStates.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    address = message.text
    user_id = message.from_user.id
    user_addresses[user_id] = address
    await state.update_data(address=address)
    await finish_order(message, state)


async def finish_order(message: types.Message, state: FSMContext):
    data = await state.get_data()
    phone = data.get("phone")
    address = data.get("address")

    user_id = message.from_user.id
    cart = user_carts.get(user_id, {})

    if not cart:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
        await state.clear()
        return

    order_text = "–í–∞—à –∑–∞–∫–∞–∑:\n"
    for product_key, qty in cart.items():
        if product_key == "peperoni":
            name = "–ü–∏—Ü—Ü–∞ –ø–µ–ø–ø–µ—Ä–æ–Ω–∏"
        elif product_key == "margarita":
            name = "–ü–∏—Ü—Ü–∞ –º–∞—Ä–≥–∞—Ä–∏—Ç–∞"
        elif product_key == "4sura":
            name = "–ü–∏—Ü—Ü–∞ 4 —Å—ã—Ä–∞"
        else:
            name = product_key
        order_text += f"{name} - {qty} —à—Ç.\n"

    order_text += f"\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."

    await message.answer(order_text)
    user_carts[user_id] = {}
    await state.clear()

